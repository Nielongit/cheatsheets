https://confluence.nexgen.neustar.biz/display/OMS/OMS+Continuous+Deployment+Pipeline+Approach
https://neustar.ci.cloudbees.com/job/ICP-Pipeline/view/Build%20Pipeline/

https://git.nexgen.neustar.biz/oms/DSET/

###################
mkdir /tmp/svn2git/repoName
cd /tmp/svn2git/repoName
vi urllist.txt
 /opt/svn2git/fetch-authors.sh --url-file=urllist.txt --destination=authors-list.txt

git svn clone http://192.168.5.25/svn/ezTroubleAdmin/ --authors-file=authors-list.txt --no-metadata --stdlayout /tmp/svn2git/repoName/repoName  2>&1 | tee svn2git-repoName.log
cd /tmp/svn2git/repoName/repoName

###########
git for-each-ref refs/remotes/tags | cut -d / -f 4- | grep -v @ | while read tagname; do git tag "$tagname" "tags/$tagname"; git branch -r -d "tags/$tagname"; done
git tag -l
git for-each-ref refs/remotes | cut -d / -f 3- | grep -v @ | while read branchname; do git branch "$branchname" "refs/remotes/$branchname"; git branch -r -d "$branchname"; done
git branch
git branch -d trunk
git init
########VVVVV
../../git-tagbranch.sh
cd ..
../chkrev.sh svn2git-SOAADAPTER.log > Check-SOAADAPTER.log

######
git remote add origin git@192.168.5.25:lindesh/testrepo1.git
git push origin --all
git push origin --tags

##########
##New updates on svn
git svn fetch
git svn rebase -l
git push origin --all
git push origin --tags


#####################
git svn clone -r 1234 https://svn.example.com/svn/project_name

If you would like some of the history you can get that also, so if you would like say the last 234 commits run:
git svn clone -r 1000:1234 https://svn.example.com/svn/project_name

Then, to update your git repo once the SVN repository has been committed to, run
git svn fetch


#############Imange erro
[root@redlotus iManage]# git branch -m %20imangedemo.1.0 imangedemo.1.0
[root@redlotus iManage]# git push origin :%20imangedemo.1.0
To ssh://git@git.nexgen.neustar.biz:8022/OMS-DSET/iManage.git
 - [deleted]         %20imangedemo.1.0
[root@redlotus iManage]# git push origin imangedemo.1.0
Counting objects: 1, done.
Writing objects: 100% (1/1), 264 bytes, done.
Total 1 (delta 0), reused 1 (delta 0)
To ssh://git@git.nexgen.neustar.biz:8022/OMS-DSET/iManage.git
 * [new branch]      imangedemo.1.0 -> imangedemo.1.0
#############################


MOVE GIT Server

cd TA-Management
git fetch origin
git branch -a

#Create local branches
git checkout -b TA_JBOSS_ORACLE_500 origin/TA_JBOSS_ORACLE_500
git checkout -b TA_JBOSS_ORACLE_610 origin/TA_JBOSS_ORACLE_610

git branch -a
git remote add new-origin git@saturn:NETECH/TA-Management.git
git remote -v
git push --all new-origin
git push --tags new-origin
git remote rm origin
git remote rename new-origin origin


########################################
#Remove large files

git clone remote-url

#run script to find branch
#!/bin/bash
for branch in `git branch -a | grep remotes | grep -v HEAD | grep -v master`; do
    git branch --track ${branch##*/} $branch
done

#runscript to find large files
######____________________
#!/bin/bash
#set -x 

# Shows you the largest objects in your repo's pack file.
# Written for osx.
#
# @see http://stubbisms.wordpress.com/2009/07/10/git-script-to-show-largest-pack-objects-and-trim-your-waist-line/
# @author Antony Stubbs

# set the internal field spereator to line break, so that we can iterate easily over the verify-pack output
IFS=$'\n';

# list all objects including their size, sort by size, take top 10
objects=`git verify-pack -v .git/objects/pack/pack-*.idx | grep -v chain | sort -k3nr | head`

echo "All sizes are in kB. The pack column is the size of the object, compressed, inside the pack file."

output="size,pack,SHA,location"
for y in $objects
do
	# extract the size in bytes
	size=$((`echo $y | cut -f 5 -d ' '`/1024))
	# extract the compressed size in bytes
	compressedSize=$((`echo $y | cut -f 6 -d ' '`/1024))
	# extract the SHA
	sha=`echo $y | cut -f 1 -d ' '`
	# find the objects location in the repository tree
	other=`git rev-list --all --objects | grep $sha`
	#lineBreak=`echo -e "\n"`
	output="${output}\n${size},${compressedSize},${other}"
done

echo -e $output | column -t -s ', '
#####___________________________

# delete files from above script
$ git filter-branch --tag-name-filter cat --index-filter 'git rm -r --cached --ignore-unmatch filename' --prune-empty -f -- --all

#Reclaim space
$ rm -rf .git/refs/original/
$ git reflog expire --expire=now --all
$ git gc --prune=now
$ git gc --aggressive --prune=now

#Push the cleaned repository
$ git push origin --force --all

#Then push the newly-rewritten tags:
$ git push origin --force --tags